# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def gemm(A_handle: T.handle, B_handle: T.handle, C_handle: T.handle):
        T.func_attr({"target": T.target({"host": {"keys": ["cpu"], "kind": "llvm", "mtriple": "x86_64-pc-linux-gnu", "tag": ""}, "keys": ["tenstorrent"], "kind": "tenstorrent", "tag": ""}), "tt.core_grid": [8, 8], "tt.core_range": {"extent": [8, 8], "start": [0, 0]}, "tt.core_ranges": [{"extent": [8, 8], "start": [0, 0]}], "tt.layout_desc": {"A": {"interleave": False, "shard": "DRAM", "tile_id_order": "row_major"}, "B": {"interleave": True, "shard": "DRAM", "tile_id_order": "row_major"}, "C": {"interleave": False, "shard": "L1", "tile_id_order": "row_major"}}, "tt.work_partition": {"(0,0)": [{"io": 0, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(0,1)": [{"io": 0, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(0,2)": [{"io": 0, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(0,3)": [{"io": 0, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(0,4)": [{"io": 0, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(0,5)": [{"io": 0, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(0,6)": [{"io": 0, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(0,7)": [{"io": 0, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(1,0)": [{"io": 1, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(1,1)": [{"io": 1, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(1,2)": [{"io": 1, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(1,3)": [{"io": 1, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(1,4)": [{"io": 1, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(1,5)": [{"io": 1, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(1,6)": [{"io": 1, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(1,7)": [{"io": 1, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(2,0)": [{"io": 2, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(2,1)": [{"io": 2, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(2,2)": [{"io": 2, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(2,3)": [{"io": 2, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(2,4)": [{"io": 2, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(2,5)": [{"io": 2, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(2,6)": [{"io": 2, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(2,7)": [{"io": 2, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(3,0)": [{"io": 3, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(3,1)": [{"io": 3, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(3,2)": [{"io": 3, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(3,3)": [{"io": 3, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(3,4)": [{"io": 3, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(3,5)": [{"io": 3, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(3,6)": [{"io": 3, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(3,7)": [{"io": 3, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(4,0)": [{"io": 4, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(4,1)": [{"io": 4, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(4,2)": [{"io": 4, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(4,3)": [{"io": 4, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(4,4)": [{"io": 4, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(4,5)": [{"io": 4, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(4,6)": [{"io": 4, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(4,7)": [{"io": 4, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(5,0)": [{"io": 5, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(5,1)": [{"io": 5, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(5,2)": [{"io": 5, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(5,3)": [{"io": 5, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(5,4)": [{"io": 5, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(5,5)": [{"io": 5, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(5,6)": [{"io": 5, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(5,7)": [{"io": 5, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(6,0)": [{"io": 6, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(6,1)": [{"io": 6, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(6,2)": [{"io": 6, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(6,3)": [{"io": 6, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(6,4)": [{"io": 6, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(6,5)": [{"io": 6, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(6,6)": [{"io": 6, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(6,7)": [{"io": 6, "jo": 7, "len_k": 4, "tile_order": "row_major"}], "(7,0)": [{"io": 7, "jo": 0, "len_k": 4, "tile_order": "row_major"}], "(7,1)": [{"io": 7, "jo": 1, "len_k": 4, "tile_order": "row_major"}], "(7,2)": [{"io": 7, "jo": 2, "len_k": 4, "tile_order": "row_major"}], "(7,3)": [{"io": 7, "jo": 3, "len_k": 4, "tile_order": "row_major"}], "(7,4)": [{"io": 7, "jo": 4, "len_k": 4, "tile_order": "row_major"}], "(7,5)": [{"io": 7, "jo": 5, "len_k": 4, "tile_order": "row_major"}], "(7,6)": [{"io": 7, "jo": 6, "len_k": 4, "tile_order": "row_major"}], "(7,7)": [{"io": 7, "jo": 7, "len_k": 4, "tile_order": "row_major"}]}, "tt_layout_type": "dram_interleaved", "tt_schedule_order": "row_major", "tt_schedule_policy": "contiguous", "tt_tile_height": 32, "tt_tile_width": 32})
        A = T.match_buffer(A_handle, (256, 256), "float16", strides=(256, 1))
        B = T.match_buffer(B_handle, (256, 256), "float16", strides=(256, 1))
        C = T.match_buffer(C_handle, (256, 256), "float16", strides=(256, 1))
        # with T.block("root"):
        bx = T.launch_thread("blockIdx.x", 8)
        by = T.launch_thread("blockIdx.y", 8)
        tx = T.launch_thread("threadIdx.x", 128)
        ty = T.launch_thread("threadIdx.y", 1)
        tz = T.launch_thread("threadIdx.z", 1)
        with T.block("tilelang_root"):
            T.reads(A[by * 32, 0:225], B[0:225, bx * 32], C[by * 32, bx * 32])
            T.writes()
            A_shared = T.alloc_buffer((32, 32), "float16", scope="shared.dyn")
            B_shared = T.alloc_buffer((32, 32), "float16", scope="shared.dyn")
            C_local = T.alloc_buffer((32, 32), scope="local.fragment")
            T.fill(T.tvm_access_ptr(T.type_annotation("float32"), C_local.data, 0, 1024, 2), 0)
            for k in T.serial(8, annotations={"num_stages": 3}):
                T.copy(T.region(A[by * 32, k * 32], 1, 32, 32), T.region(A_shared[0, 0], 2, 32, 32), -1, T.bool(False), 0)
                T.copy(T.region(B[k * 32, bx * 32], 1, 32, 32), T.region(B_shared[0, 0], 2, 32, 32), -1, T.bool(False), 0)
                T.gemm(T.tvm_access_ptr(T.type_annotation("float16"), A_shared.data, 0, 1024, 1), T.tvm_access_ptr(T.type_annotation("float16"), B_shared.data, 0, 1024, 1), T.tvm_access_ptr(T.type_annotation("float32"), C_local.data, 0, 1024, 3), T.bool(False), T.bool(False), 32, 32, 32, 0, T.bool(False), 32, 32, 0, 0, 1, 0, T.uint32(0), 0, 0)
            T.copy(T.region(C_local[0, 0], 1, 32, 32), T.region(C[by * 32, bx * 32], 2, 32, 32), -1, T.bool(False), 0)