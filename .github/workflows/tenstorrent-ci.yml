name: Tenstorrent Backend CI

on:
  pull_request:
    paths:
      - 'tilelang/engine/tt/**'
      - 'testing/python/tt/**'
      - 'tilelang/utils/target.py'
      - '.github/workflows/tenstorrent-ci.yml'
  push:
    branches:
      - main
      - 'ws1-**'

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-lint.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-lint.txt

    - name: Run format.sh check
      run: |
        bash format.sh
        # Check if format.sh made any changes
        if ! git diff --quiet; then
          echo "Code formatting issues found. Please run format.sh locally and commit the changes."
          git diff
          exit 1
        fi

  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-test.txt'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          llvm \
          libedit-dev \
          libxml2-dev \
          zlib1g-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Generate TVM cache key
      id: tvm-cache-key
      run: |
        # Cache key based on TVM submodule commit hash
        TVM_COMMIT=$(git rev-parse HEAD:3rdparty/tvm)
        echo "tvm_commit=$TVM_COMMIT" >> $GITHUB_OUTPUT
        echo "TVM submodule at commit: $TVM_COMMIT"

    - name: Cache TVM build
      id: cache-tvm
      uses: actions/cache@v4
      with:
        path: |
          build/libtvm*.so
          build/3rdparty/
        key: tvm-build-llvm-${{ steps.tvm-cache-key.outputs.tvm_commit }}-${{ runner.os }}
        restore-keys: |
          tvm-build-llvm-${{ steps.tvm-cache-key.outputs.tvm_commit }}-
          tvm-build-llvm-

    - name: Log TVM cache status
      run: echo "TVM cache hit: ${{ steps.cache-tvm.outputs.cache-hit }}"

    - name: Build TileLang with LLVM
      run: |
        mkdir -p build
        cd build
        # Create config.cmake for TVM
        cp ../3rdparty/tvm/cmake/config.cmake .
        echo "set(USE_LLVM ON)" >> config.cmake
        echo "set(USE_CUDA OFF)" >> config.cmake

        # Configure with CMake
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

        # Build (use fewer jobs to avoid OOM on GitHub runners)
        # If cache hit, this will be much faster as TVM is already built
        cmake --build . --config Release -j 2

    - name: Install TileLang
      run: |
        # Copy built libraries to tilelang/lib
        mkdir -p tilelang/lib
        cp build/*.so tilelang/lib/ || true

        # Install Python package in development mode
        # Set USE_LLVM=true for LLVM build, dummy CUDA_HOME to pass validation,
        # and disable commit ID to avoid nvcc check
        export USE_LLVM=true
        export CUDA_HOME=/usr
        export WITH_COMMITID=False
        pip install -e .

    - name: Run Tenstorrent target registration tests
      run: |
        cd testing/python/tt
        pytest test_target_registration.py -v --tb=short
      continue-on-error: true  # Don't fail if TVM isn't fully available

    - name: Run all Python tests (if TVM available)
      run: |
        cd testing/python
        pytest tt/ -v --tb=short -k "not gpu" || echo "Some tests skipped (no GPU)"
      continue-on-error: true

  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements-mypy.txt'

    - name: Install mypy
      run: |
        pip install -r requirements-mypy.txt

    - name: Type check Tenstorrent backend
      run: |
        mypy tilelang/engine/tt/ --ignore-missing-imports || true
      continue-on-error: true
