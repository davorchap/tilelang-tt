name: Tenstorrent SDK Integration Tests

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight UTC
  pull_request:
    paths:
      - '.github/workflows/tenstorrent-sdk-ci.yml'

# Auto-cancel superseded runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  TT_METAL_VERSION: "v0.63.0"  # Latest stable release (updated 2025-10-13)
  TT_METAL_HOME: /home/runner/tt-metal
  PYTHON_VERSION: '3.10'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'

jobs:
  build-with-sdk:
    runs-on: ubuntu-22.04  # Match tt-metal's supported platform
    steps:
      - name: Checkout TileLang
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-tenstorrent.txt
            pyproject.toml

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            llvm \
            libedit-dev \
            libxml2-dev \
            zlib1g-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-tenstorrent.txt

      # Install tt-metal SDK (hybrid approach: pip for libraries, git for headers)
      - name: Install TT-Metalium SDK
        run: |
          echo "=== Installing TT-Metalium SDK (Hybrid Approach) ==="

          # Install ttnn via pip to get compiled libraries
          echo "Step 1: Installing ttnn package for libraries..."
          pip install ttnn

          # Find where ttnn was installed
          TTNN_LOCATION=$(python3 -c "import ttnn; import os; print(os.path.dirname(ttnn.__file__))")
          echo "ttnn installed at: $TTNN_LOCATION"

          # Get the version from pip package
          echo ""
          echo "Step 2: Detecting ttnn version..."
          # Try to detect version from the package
          TTNN_VERSION=$(pip show ttnn | grep Version | awk '{print $2}')
          echo "Detected ttnn version: $TTNN_VERSION"

          # Map pip version to git tag (may need adjustment)
          # pip version format: 0.63.0 -> git tag: v0.63.0
          TT_METAL_GIT_TAG="v${TTNN_VERSION}"
          echo "Corresponding tt-metal tag: $TT_METAL_GIT_TAG"

          # Clone tt-metal repo for headers (no submodules, no build)
          # Note: Not using --depth 1 to ensure working tree is properly checked out
          echo ""
          echo "Step 3: Cloning tt-metal repository for headers..."
          git clone --branch "$TT_METAL_GIT_TAG" \
            https://github.com/tenstorrent/tt-metal.git /tmp/tt-metal-headers

          # Verify clone succeeded and show what we got
          echo "Contents of /tmp/tt-metal-headers:"
          ls -la /tmp/tt-metal-headers/ | head -30

          if [ ! -d "/tmp/tt-metal-headers/tt_metal" ]; then
            echo "❌ Failed to clone tt-metal repository - tt_metal directory not found"
            exit 1
          fi
          echo "✅ tt_metal directory exists, checking for host_api.hpp:"
          ls -la /tmp/tt-metal-headers/tt_metal/ | grep -i host || echo "host_api.hpp not in root of tt_metal"
          find /tmp/tt-metal-headers/tt_metal -name "host_api.hpp" -type f | head -5

          # Create a hybrid SDK directory structure
          echo ""
          echo "Step 4: Setting up hybrid SDK structure..."
          mkdir -p ~/tt-metal-sdk

          # Copy headers from cloned repo
          echo "Copying headers from /tmp/tt-metal-headers/tt_metal to ~/tt-metal-sdk/"
          cp -r /tmp/tt-metal-headers/tt_metal ~/tt-metal-sdk/

          # Verify headers were copied
          if [ ! -f ~/tt-metal-sdk/tt_metal/host_api.hpp ]; then
            echo "❌ Failed to copy headers"
            ls -la /tmp/tt-metal-headers/ | head -20
            ls -la ~/tt-metal-sdk/ | head -20
            exit 1
          fi
          echo "✅ Headers copied successfully"

          # Symlink libraries from pip-installed ttnn
          echo "Symlinking libraries from $TTNN_LOCATION/build/lib/"
          mkdir -p ~/tt-metal-sdk/build/lib
          ln -sf "$TTNN_LOCATION"/build/lib/*.so ~/tt-metal-sdk/build/lib/

          # Verify symlinks
          echo "Library symlinks created:"
          ls -lh ~/tt-metal-sdk/build/lib/ | head -10

          # Set TT_METAL_HOME to our hybrid directory
          echo "TT_METAL_HOME=$HOME/tt-metal-sdk" >> $GITHUB_ENV

          echo ""
          echo "✅ TT-Metalium SDK installed successfully (hybrid mode)"
          echo "   - Headers from: git clone (no build required)"
          echo "   - Libraries from: pip install ttnn"

      - name: Verify tt-metal SDK
        run: |
          echo "=== Verifying TT-Metalium SDK ==="
          echo "TT_METAL_HOME: $TT_METAL_HOME"

          # Check headers
          if [ -f "$TT_METAL_HOME/tt_metal/host_api.hpp" ]; then
            echo "✅ Headers found"
          else
            echo "❌ Headers missing"
            exit 1
          fi

          # Check libraries
          if [ -f "$TT_METAL_HOME/build/lib/libtt_metal.so" ]; then
            echo "✅ Libraries found"
            ls -lh "$TT_METAL_HOME/build/lib/"*.so | head -5
          else
            echo "❌ Libraries missing"
            exit 1
          fi

          echo ""
          echo "✅ TT-Metalium SDK verified successfully"

      # Enable ccache for faster builds
      - name: Enable ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        with:
          key: ${{ runner.os }}-ccache-llvm-metalium-${{ hashFiles('CMakeLists.txt') }}-v1
          max-size: 2G
          create-symlink: true

      # Build TileLang with real Metalium SDK (hybrid headers + pip libraries)
      - name: Build TileLang with real Metalium
        run: |
          echo "=== Building TileLang with Real TT-Metalium SDK ==="

          # Configure with real SDK (headers from git, libraries from pip)
          cmake -B build \
            -G Ninja \
            -DUSE_LLVM=true \
            -DUSE_REAL_METALIUM=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$TT_METAL_HOME/build" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

          # Build
          cmake --build build --config Release -j$(nproc)

      - name: Print ccache stats
        if: always()
        run: |
          if command -v ccache >/dev/null 2>&1; then
            ccache -s
          fi

      - name: Install TileLang Python packages
        run: |
          # Install TVM
          export TVM_LIBRARY_PATH=$(pwd)/build/tvm
          cd 3rdparty/tvm/python
          pip install -e .
          cd ../../..

          # Install TileLang
          pip install -e . --no-build-isolation

      - name: Run tests with real Metalium APIs
        run: |
          export LD_LIBRARY_PATH=$(pwd)/build/tvm:$LD_LIBRARY_PATH
          export TT_METAL_HOME=$TT_METAL_HOME

          echo "=== Running Tenstorrent Tests with Real Metalium ==="
          pytest testing/python/tenstorrent/ -v --tb=short

      - name: Verify generated code uses real Metalium APIs
        run: |
          export LD_LIBRARY_PATH=$(pwd)/build/tvm:$LD_LIBRARY_PATH

          python3 -c '
          import tilelang.tenstorrent as tt
          import tvm
          from tvm import tir

          print("=== Verifying Real Metalium API Usage ===")

          # Create simple test module
          A = tir.decl_buffer((256, 256), "float16", name="A")
          B = tir.decl_buffer((256, 256), "float16", name="B")
          C = tir.decl_buffer((256, 256), "float16", name="C")

          func = tir.PrimFunc(params=[A, B, C], body=tir.Evaluate(0))
          func = func.with_attrs({
              "global_symbol": "main",
              "tt_grid_x": 8,
              "tt_grid_y": 8,
              "tt_num_cores": 64,
          })

          mod = tvm.IRModule({"main": func})

          # Apply TT defaults and generate code
          mod = tt.apply_default_schedule(mod)
          artifacts = tt.emit_tt_artifacts(mod)

          # Verify main.cpp uses real Metalium headers
          main_cpp = artifacts.get("main.cpp", "")

          # Check for real API includes
          real_api_markers = [
              "#include \"tt_metal/host_api.hpp\"",
              "distributed::MeshDevice",
              "distributed::MeshBuffer",
          ]

          missing = []
          for marker in real_api_markers:
              if marker not in main_cpp:
                  missing.append(marker)

          if missing:
              print(f"❌ Missing real Metalium API markers: {missing}")
              print("\nGenerated code snippet:")
              print(main_cpp[:500])
              exit(1)
          else:
              print("✅ Generated code uses real Metalium APIs")
              print("  - Found tt_metal/host_api.hpp include")
              print("  - Found distributed::MeshDevice usage")
              print("  - Found distributed::MeshBuffer usage")

          print("\n=== Verification Complete ===")
          '
