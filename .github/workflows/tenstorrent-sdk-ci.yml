name: Tenstorrent SDK Integration Tests

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight UTC
  pull_request:
    paths:
      - '.github/workflows/tenstorrent-sdk-ci.yml'

# Auto-cancel superseded runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  TT_METAL_VERSION: "v0.63.0"  # Latest stable release (updated 2025-10-13)
  TT_METAL_HOME: /home/runner/tt-metal
  PYTHON_VERSION: '3.10'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'

jobs:
  build-with-sdk:
    runs-on: ubuntu-22.04  # Match tt-metal's supported platform
    steps:
      - name: Checkout TileLang
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-tenstorrent.txt
            pyproject.toml

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            llvm \
            libedit-dev \
            libxml2-dev \
            zlib1g-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-tenstorrent.txt

      # Install tt-metal SDK via pip (faster than building from source)
      - name: Install TT-Metalium SDK via pip
        run: |
          echo "=== Installing TT-Metalium SDK via pip ==="
          echo "Version: $TT_METAL_VERSION"

          # Install ttnn package
          pip install ttnn

          # Find where ttnn was installed
          TTNN_LOCATION=$(python3 -c "import ttnn; import os; print(os.path.dirname(ttnn.__file__))")
          echo "ttnn installed at: $TTNN_LOCATION"

          # Set TT_METAL_HOME to the parent directory of ttnn package
          # (ttnn package contains the SDK files)
          echo "TT_METAL_HOME=$TTNN_LOCATION" >> $GITHUB_ENV

          echo "TT-Metalium SDK installed successfully"

      - name: Verify tt-metal SDK
        run: |
          echo "=== Verifying TT-Metalium SDK ==="
          echo "TT_METAL_HOME: $TT_METAL_HOME"

          # Verify ttnn can be imported
          python3 -c "import ttnn; print(f'✅ ttnn version: {ttnn.__version__}')"

          # List SDK directory structure
          echo ""
          echo "SDK directory structure:"
          ls -la "$TT_METAL_HOME" | head -20

          echo ""
          echo "✅ TT-Metalium SDK verified"

      # Enable ccache for faster builds
      - name: Enable ccache
        uses: hendrikmuhs/ccache-action@v1.2.19
        with:
          key: ${{ runner.os }}-ccache-llvm-metalium-${{ hashFiles('CMakeLists.txt') }}-v1
          max-size: 2G
          create-symlink: true

      # Build TileLang with real Metalium
      - name: Build TileLang with real Metalium
        run: |
          echo "=== Building TileLang with Real TT-Metalium SDK ==="

          # Find tt-metal library and include paths from pip-installed ttnn
          echo "Searching for tt-metal libraries and headers in ttnn package..."
          find "$TT_METAL_HOME" -name "*.so" -o -name "*.a" | head -10
          find "$TT_METAL_HOME" -name "host_api.hpp" | head -5

          # Configure (TT_METAL_HOME points to site-packages/ttnn)
          cmake -B build \
            -G Ninja \
            -DUSE_LLVM=true \
            -DUSE_REAL_METALIUM=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$TT_METAL_HOME" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

          # Build
          cmake --build build --config Release -j$(nproc)

      - name: Print ccache stats
        if: always()
        run: |
          if command -v ccache >/dev/null 2>&1; then
            ccache -s
          fi

      - name: Install TileLang Python packages
        run: |
          # Install TVM
          export TVM_LIBRARY_PATH=$(pwd)/build/tvm
          cd 3rdparty/tvm/python
          pip install -e .
          cd ../../..

          # Install TileLang
          pip install -e . --no-build-isolation

      - name: Run tests with real Metalium APIs
        run: |
          export LD_LIBRARY_PATH=$(pwd)/build/tvm:$LD_LIBRARY_PATH
          export TT_METAL_HOME=$TT_METAL_HOME

          echo "=== Running Tenstorrent Tests with Real Metalium ==="
          pytest testing/python/tenstorrent/ -v --tb=short

      - name: Verify generated code uses real Metalium APIs
        run: |
          export LD_LIBRARY_PATH=$(pwd)/build/tvm:$LD_LIBRARY_PATH

          python3 -c '
          import tilelang.tenstorrent as tt
          import tvm
          from tvm import tir

          print("=== Verifying Real Metalium API Usage ===")

          # Create simple test module
          A = tir.decl_buffer((256, 256), "float16", name="A")
          B = tir.decl_buffer((256, 256), "float16", name="B")
          C = tir.decl_buffer((256, 256), "float16", name="C")

          func = tir.PrimFunc(params=[A, B, C], body=tir.Evaluate(0))
          func = func.with_attrs({
              "global_symbol": "main",
              "tt_grid_x": 8,
              "tt_grid_y": 8,
              "tt_num_cores": 64,
          })

          mod = tvm.IRModule({"main": func})

          # Apply TT defaults and generate code
          mod = tt.apply_default_schedule(mod)
          artifacts = tt.emit_tt_artifacts(mod)

          # Verify main.cpp uses real Metalium headers (not mock)
          main_cpp = artifacts.get("main.cpp", "")

          # Check for real API includes
          real_api_markers = [
              "#include \"tt_metal/host_api.hpp\"",
              "distributed::MeshDevice",
              "distributed::MeshBuffer",
          ]

          missing = []
          for marker in real_api_markers:
              if marker not in main_cpp:
                  missing.append(marker)

          if missing:
              print(f"❌ Missing real Metalium API markers: {missing}")
              print("\nGenerated code snippet:")
              print(main_cpp[:500])
              exit(1)
          else:
              print("✅ Generated code uses real Metalium APIs")
              print("  - Found tt_metal/host_api.hpp include")
              print("  - Found distributed::MeshDevice usage")
              print("  - Found distributed::MeshBuffer usage")

          print("\n=== Verification Complete ===")
          '

      # Note: Skipping local build script test for now since it expects
      # a built-from-source SDK structure, not pip-installed ttnn.
      # We can re-enable this once the local script supports pip install.
